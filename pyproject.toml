[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "llm-evaluator"
version = "1.0.0"
description = "A comprehensive framework for evaluating Large Language Models"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Mark Stent", email = "mark.stent@allwyninternational.com"}
]
maintainers = [
    {name = "Mark Stent", email = "mark.stent@allwyninternational.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["llm", "evaluation", "ai", "nlp", "benchmarking", "machine-learning"]
requires-python = ">=3.8"
dependencies = [
    "openai>=1.0.0",
    "anthropic>=0.25.0",
    "wandb>=0.16.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "pyyaml>=6.0.0",
    "aiohttp>=3.8.0",
    "tqdm>=4.65.0",
    "google-generativeai>=0.3.0",
    "rouge-score>=0.1.2",
    "nltk>=3.8.0",
    "bert-score>=0.3.13",
    "sentence-transformers>=2.2.0",
    "scikit-learn>=1.3.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",
    "click>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=0.18.0",
]
ollama = [
    "ollama>=0.1.0",
]

[project.urls]
"Homepage" = "https://github.com/mark-allwyn/llm-evaluator"
"Bug Tracker" = "https://github.com/mark-allwyn/llm-evaluator/issues"
"Documentation" = "https://github.com/mark-allwyn/llm-evaluator#readme"
"Source Code" = "https://github.com/mark-allwyn/llm-evaluator"
"Changelog" = "https://github.com/mark-allwyn/llm-evaluator/blob/main/CHANGELOG.md"

[project.scripts]
llm-eval = "main:main"
llm-evaluator = "cli:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "rouge_score.*",
    "bert_score.*",
    "sentence_transformers.*",
    "nltk.*",
    "wandb.*",
    "anthropic.*",
    "google.generativeai.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
